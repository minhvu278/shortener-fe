'use client';

import { useState } from 'react';
import {
  TextField,
  Button,
  Typography,
  Box,
  CircularProgress,
  ToggleButton,
  ToggleButtonGroup,
  Paper
} from '@mui/material';
import { api } from '@/utils/api';
import theme from '@/lib/theme';
import InsertLinkIcon from '@mui/icons-material/InsertLink';
import QrCodeIcon from '@mui/icons-material/QrCode';
import StatsSection from '@/components/home/stats-section';

const ShortenForm = () => {
  const [originalUrl, setOriginalUrl] = useState('');
  const [shortCode, setShortCode] = useState('');
  const [qrCode, setQrCode] = useState('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState('');

  const handleShorten = async () => {
    if (!originalUrl) {
      setError('Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá');
      return;
    }

    setLoading(true);
    setError('');
    try {
      const response = await api.post('/links', { originalUrl });
      console.log(response);
      
      setShortCode(response.data.shortUrl);
      setQrCode(response.data.qrCode);
    } catch (error) {
      console.error('L·ªói:', error);
      setError('Kh√¥ng th·ªÉ r√∫t g·ªçn URL. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const [selectedOption, setSelectedOption] = useState("short-link");

  return (
    <>
      <Box sx={{ textAlign: "center", backgroundColor: theme.palette.primary.main, color: "white", py: 6 }}>
        <Typography variant="h4" fontWeight="bold">
          X√¢y d·ª±ng k·∫øt n·ªëi k·ªπ thu·∫≠t s·ªë m·∫°nh m·∫Ω h∆°n
        </Typography>
        <Typography variant="body1" sx={{ mt: 1, mb: 3, maxWidth: "620px", mx: "auto" }}>
          S·ª≠ d·ª•ng tr√¨nh r√∫t g·ªçn URL, M√£ QR v√† link ƒë√≠ch c·ªßa ch√∫ng t√¥i ƒë·ªÉ thu h√∫t kh√°ch h√†ng v√† k·∫øt n·ªëi h·ªç v·ªõi th√¥ng tin ph√π h·ª£p.
          X√¢y d·ª±ng, ch·ªânh s·ª≠a v√† theo d√µi m·ªçi th·ª©.
        </Typography>

        <ToggleButtonGroup
          value={selectedOption}
          exclusive
          onChange={(event, newValue) => newValue && setSelectedOption(newValue)}
          sx={{ mb: 3 }}
        >
          <Button value="short-link" sx={{ px: 3, color: theme.palette.primary.main, backgroundColor: theme.palette.secondary.main }}>
            <InsertLinkIcon sx={{ mr: 1 }} />
            Link ng·∫Øn
          </Button>
          <Button value="qr-code" sx={{ px: 3, color: theme.palette.secondary.main }}>
            <QrCodeIcon sx={{ mr: 1 }} />
            QR Code
          </Button>
        </ToggleButtonGroup>

        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            maxWidth: "500px",
            mx: "auto",
            p: 3,
            borderRadius: "16px",
          }}
        >
          <Typography variant="h5" fontWeight="bold">
            R√∫t ng·∫Øn m·ªôt li√™n k·∫øt d√†i
          </Typography>
          <Typography variant="body2" sx={{ mb: 2 }}>
            Kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng.
          </Typography>

          <TextField
            value={originalUrl}
            onChange={(e) => setOriginalUrl(e.target.value)}
            fullWidth
            placeholder="https://example.com/my-long-url"
            variant="outlined"
            sx={{ mb: 2, bgcolor: "white", borderRadius: "8px" }}
          />
          <Button variant="contained" sx={{ px: 4, borderRadius: "8px" }} onClick={handleShorten} disabled={loading}>
            {loading ? <CircularProgress size={24} /> : 'Nh·∫≠n li√™n k·∫øt c·ªßa b·∫°n mi·ªÖn ph√≠ ‚Üí'}
          </Button>

          {error && (
            <Typography color="error" sx={{ mt: 2 }}>
              {error}
            </Typography>
          )}

          {shortCode && (
            <Box mt={3} textAlign="center">
              <Typography variant="h6">
                URL r√∫t g·ªçn: <a href={shortCode} target="_blank" rel="noopener noreferrer">{shortCode}</a>
              </Typography>

              {qrCode && (
                <Box mt={2}>
                  <Typography variant="body1">üì≤ Qu√©t QR ƒë·ªÉ truy c·∫≠p:</Typography>
                  <img src={qrCode} alt="QR Code" width="180" height="180" />
                </Box>
              )}
            </Box>
          )}
        </Paper>

        <Typography variant="body2" sx={{ mt: 4 }}>
          ƒêƒÉng k√Ω mi·ªÖn ph√≠. G√≥i mi·ªÖn ph√≠ c·ªßa b·∫°n bao g·ªìm:
        </Typography>
        <Typography variant="body2" sx={{ fontSize: "14px", mt: 1 }}>
          üîó 5 link ng·∫Øn/th√°ng &nbsp;&nbsp; | &nbsp;&nbsp; üé® Ch·ªânh th·ªùi gian h·∫øt h·∫°n link &nbsp;&nbsp; | &nbsp;&nbsp; üìä Nh·∫•p v√†o li√™n k·∫øt kh√¥ng gi·ªõi h·∫°n
        </Typography>
      </Box>

      <StatsSection />
    </>
  );
};

export default ShortenForm;
